<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jens Blawatt.de</title>
    <link>/</link>
    <description>Recent content on Jens Blawatt.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <lastBuildDate>Thu, 30 Jun 2016 14:52:15 +0200</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Impressum</title>
      <link>/impressum/</link>
      <pubDate>Thu, 30 Jun 2016 14:52:15 +0200</pubDate>
      
      <guid>/impressum/</guid>
      <description>&lt;p&gt;&lt;p&gt;Angaben gemäß § 5 Telemediengesetz (TMG):&lt;/p&gt;
&lt;p&gt;Jens Blawatt&lt;br /&gt;
Wilhemstraße 18&lt;br /&gt;
48149 Münster&lt;br /&gt;
Deutschland&lt;/p&gt;
&lt;p&gt;Kontakt:&lt;/p&gt;
E-Mail: jens [at] blawatt [dot] de&lt;/p&gt;
&lt;p&gt;Verantwortlicher für den Inhalt ist gemäß § 55 Abs. 2 Rundfunkstaatsvertrag (RStV):&lt;/p&gt;
&lt;p&gt;Jens Blawatt&lt;br /&gt;
Wilhemstraße 18&lt;br /&gt;
48149 Münster&lt;br /&gt;
Deutschland
&lt;/p&gt;
&lt;p&gt;Ausschluss der Haftung:&lt;/p&gt;
&lt;p&gt;1. Haftung für Inhalte&lt;br /&gt;
Der Inhalt meiner Internetseite wurde mit größtmöglicher Sorgfalt erstellt. Ich übernehme jedoch keine Gewähr dafür, dass dieser Inhalt richtig, vollständig, und aktuell ist und zudem noch gefällt. Gemäß § 7 Abs. 1 TMG bin ich für den Inhalt verantwortlich, selbst wenn dieser wurde bestellt.&lt;br /&gt;
Gemäß den §§ 8, 9 und 10 TMG ist für mich keine Verpflichtung gegeben, dass ich Informationen von Dritten, die übermittelt oder gespeichert wurden, überwache oder Umstände erhebe, die Hinweise auf nicht rechtmäßige Tätigkeiten ergeben.&lt;br /&gt;
Davon nicht berührt, ist meine Verpflichtung zur Sperrung oder Entfernung von Informationen, welche von den allgemeinen Gesetzen herrührt.&lt;br /&gt;
Ich hafte allerdings erst in dem Moment, in dem ich von einer konkreten Verletzung von Rechten Kenntnis bekomme. Dann wird eine unverzügliche Entfernung des entsprechenden Inhalts vorgenommen.&lt;/p&gt;
&lt;p&gt;2. Haftung für Links&lt;br /&gt;
Meine Internetseite enthält Links, die zu externen Internetseiten von Dritten führen, auf deren Inhalte ich jedoch keinen Einfluss habe. Es ist mir daher nicht möglich, eine Gewähr für diese Inhalte zu tragen.&lt;br /&gt;
Die Verantwortung dafür hat immer der jeweilige Anbieter/Betreiber der entsprechenden Internetseite. Ich überprüfe die von mir verlinkten Internetseiten zum Zeitpunkt der Verlinkung auf einen möglichen Rechtsverstoß in voller Breite.&lt;br /&gt;
Es kann mir jedoch, ohne einen konkreten Anhaltspunkt, nicht zugemutet werden, ständig die verlinkten Internetseiten inhaltlich zu überwachen. Wenn ich jedoch von einer Rechtsverletzung Kenntnis erlange, werde ich den entsprechenden Link unverzüglich entfernen, das kann ich machen.&lt;/p&gt;
&lt;p&gt;3. Urheberrecht&lt;br /&gt;
Die auf meiner Internetseite enthaltenen Inhalte sind, soweit möglich, urheberrechtlich geschützt. Es bedarf einer schriftlichen Genehmigung des Erstellers für denjenigen, der die Inhalte vervielfältigt, bearbeitet, verbreitet oder nützt.&lt;br /&gt;
Das Herunterladen und Kopieren meiner Internetseite ist sowohl für den privaten als auch den kommerziellen Gebrauch von mir schriftlich zu gestatten. Ich weise darauf hin, dass ich hinsichtlich der Inhalte auf meiner Internetseite, soweit sie nicht von mir erstellt worden sind, das Urheberrecht von Dritten jederzeit beachtet hatte.&lt;br /&gt;
Wenn Sie mir mitteilen würden, dass Sie trotzdem eine Urheberrechtsverletzung gefunden haben, würde ich das sehr schätzen. Dann kann ich den entsprechenden Inhalt sofort entfernen und würde damit das Urheberrecht nicht mehr verletzen.&lt;/p&gt;
&lt;p&gt;4. Datenschutz&lt;br /&gt;
Meine Internetseite kann regelmäßig ohne die Angabe von personenbezogenen Daten genutzt werden. Falls solche Daten (z.B. Name, Adresse oder E-Mail) doch erhoben werden sollten, geschieht das, freiwillig oder nur mit ausdrücklicher Zustimmung durch Sie und durch mich zu verbergen.&lt;br /&gt;
Die Übertragung von Daten im Internet ist mit Sicherheitslücken befangen. Es ist daher möglich, dass Dritte Zugriff auf diese Daten erlangen. Ein lückenloser Schutz ist nicht möglich, wenn auch löblich.&lt;br /&gt;
Ich widerspreche an dieser Stelle der Nutzung meiner Kontaktdaten, um mir damit nicht verlangte Werbung/Informationsmaterial/Spam-Mails zukommen zu lassen. Sollte dies dennoch geschehen, müsste ich rechtliche Schritte ins Auge fassen.&lt;/p&gt;
&lt;p&gt;Angabe der Quelle: Flegl Rechtsanwälte GmbH&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>test</title>
      <link>/test/</link>
      <pubDate>Thu, 30 Jun 2016 14:52:15 +0200</pubDate>
      
      <guid>/test/</guid>
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;foobfoo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;em&gt;Object&lt;/em&gt;&lt;/strong&gt; hello world blabl bla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Python Simple DI</title>
      <link>/code/python-simple-di/</link>
      <pubDate>Mon, 11 Apr 2016 19:15:48 +0200</pubDate>
      
      <guid>/code/python-simple-di/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://drone.io/bitbucket.org/jblawatt/python-simple-di/status.png&#34; alt=&#34;image&#34; /&gt;
&lt;img src=&#34;https://img.shields.io/pypi/v/python-simple-di.svg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;python-simple-di&lt;/em&gt; is a simple dependency injection container implementation. With its help you can create instances and its dependencies on runtime.&lt;/p&gt;

&lt;h2 id=&#34;changes:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Changes&lt;/h2&gt;

&lt;h3 id=&#34;1-6-0:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;1.6.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resolve many&lt;/strong&gt;: the new methods resolve_many and resolve_many_lazy gives you the possibility to resolve multiple objects depending on their class.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alias names&lt;/strong&gt;: you can provide a list of alias names within the object configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;constructor/factory (kw)argument overridies&lt;/strong&gt;: resolve methods noch accepts args and kwargs that will can be used instead of args configurations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;register decorator&lt;/strong&gt;: &lt;code&gt;register&lt;/code&gt; can be used as decorator now.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;use as contextmanager&lt;/strong&gt;: the container can be used as context manager to temporarily override settings in &lt;code&gt;with&lt;/code&gt; block.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-5-2:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;1.5.2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;copy settings in DIContainer.__init__.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can install it via pip: :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    pip install python-simple-di
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or via easy_install: :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    easy_install -U python-simple-di
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;To configure the &lt;code&gt;di.DIContainer&lt;/code&gt; you need to pass a dict with the needed configuration in it. Alternativly you can use an instance of &lt;code&gt;di.DIConfig&lt;/code&gt; which is used internal anyway. Define the objects name as &lt;em&gt;key&lt;/em&gt; to access it at runtime. The &lt;em&gt;value&lt;/em&gt; needs to be the configuration to create the instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; &lt;em&gt;(required)&lt;/em&gt;: This option defines the type with its complete python dotted path or the python type instance. You can add a path that will dynamicly become added to the &lt;code&gt;sys.path&lt;/code&gt; if the instance is requested. &lt;em&gt;Examples:&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;type&#39;: &#39;path.to.my.Type&#39;
&#39;type&#39;: path.to.my.Type
# or
&#39;type&#39;: &#39;/add/to/sys/path:add.to.sys.path.Type&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;args&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt;: The args can either be a &lt;code&gt;list&lt;/code&gt; of values to pass as Arguments or a &lt;code&gt;dict&lt;/code&gt; to pass as Keyword Arguments. To mix both, you can define a dictionary with an empty string or None as key and a list as value. &lt;em&gt;Examples:&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;args&#39;: [&#39;first&#39;, 3, &#39;third&#39;]
# or
&#39;args&#39;: {&#39;one&#39;: &#39;1&#39;, &#39;two&#39;:&#39;two&#39;}
# or
&#39;args&#39;: {&#39;&#39;: [1, &#39;two&#39;], &#39;three&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;lazy&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt;: This option defines whether the instance will be created on runtime or on container initialization. &lt;em&gt;Example:&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;lazy&#39;: False # default: True
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;singleton&lt;/strong&gt; &lt;em&gt;(optional, default: True)&lt;/em&gt;: If this option is set to &lt;code&gt;True&lt;/code&gt;, the created instance will be saved inside the container. Next time the same instance will be returned. If this value is set to &lt;code&gt;False&lt;/code&gt; a new instance will be created every time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;properties&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt;: This option is similar to the &lt;code&gt;args&lt;/code&gt; option. After an instance was created a buildup is called. This buildup fills the given properties with the given values in this dictionary. &lt;em&gt;Examples:&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;type&#39;: &#39;some.Person&#39;,
    &#39;propeties&#39;: {
        &#39;first_name&#39;: &#39;John&#39;,
        &#39;last_name&#39;: &#39;Doe&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;assert_type&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt;: Checks weather the created type has the given base_type.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;type&#39;: &#39;path.to.implementet.Type&#39;,
&#39;assert_type&#39;: &#39;path.to.parent.Type&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;factory_method&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt;: This options can be used to create an instance by a classmethod which creates the wanted instance. For example this can be used to create a class based views in django at runtime. &lt;em&gt;Example:&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;type&#39;: &#39;myapp.views.ClassBasedView&#39;,
&#39;factory_method&#39;: &#39;as_view&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;argument-resolvers:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Argument Resolvers&lt;/h3&gt;

&lt;p&gt;With the help of the resolver the magic comes into play. Thanks to this small classes it is possible to trigger the dependencies of a type at runtime.&lt;/p&gt;

&lt;p&gt;The following resolver be brought by the default package. Individual resolver can be implemented by extending the base class &lt;code&gt;di.Resolver&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;referenceresolver:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;ReferenceResolver&lt;/h4&gt;

&lt;p&gt;The ReferenceResolver offers the possibility to an attribute within the python path to refer. This must be the path and the object, as a Python dotted path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;args&#39;: {
        &#39;output_stream&#39;: ReferenceResolver(&#39;sys.stdout&#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;di also provides some shortcuts for this name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di.ref(&#39;sys.stdout&#39;)&lt;/code&gt; as shortcut for type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;di.reference(&#39;sys.stdout&#39;)&lt;/code&gt; as shortcut for the type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;ref:sys.stdout&#39;&lt;/code&gt; as prefix of the configured type to lazy use the resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;relationresolver:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;RelationResolver&lt;/h4&gt;

&lt;p&gt;The RelationResolver allows the resolution of an object of this container at runtime.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;object_a&#39;: {
        &#39;type&#39;: &#39;some.ClassName&#39;
    },
    &#39;object_b&#39;: {
        &#39;type&#39;: &#39;some.other.ClassName&#39;,
        &#39;args&#39;: [
            RelationResolver(&#39;object_a&#39;)
        ]
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;di also provides some shortcuts for this name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di.rel(&#39;object_a&#39;)&lt;/code&gt; as shortcut for type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;di.relation(&#39;object_a&#39;)&lt;/code&gt; as shortcut for the type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;rel:object_a&#39;&lt;/code&gt; as prefix of the configured type to lazy use the resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;moduleresover:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;ModuleResover&lt;/h4&gt;

&lt;p&gt;Sometimes it may be necessary to pass an entire module as a parameter. For this purpose the ModuleResolver available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;type&#39;: &#39;some.ClassName&#39;,
    &#39;args&#39;: {
        &#39;serializer&#39;: ModuleResolver(&#39;json&#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Di also provides some shortcuts for this name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di.mod(&#39;json&#39;)&lt;/code&gt; as shortcut for type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;di.module(&#39;json&#39;)&lt;/code&gt; as shortcut for the type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;mod:json&#39;&lt;/code&gt; as prefix of the configured type to lazy use the resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;factoryresolver:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;FactoryResolver&lt;/h4&gt;

&lt;p&gt;With the help of FactoryResolver the return value of a function as an argument can be passed to the specified type.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;type&#39;: &#39;some.ClassName&#39;,
    &#39;args&#39;: [
        FactoryResolver(&#39;path.to.the.factory_method&#39;)
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Di also provides some shortcuts for this name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di.fac(&#39;path.to.the.factory_method&#39;)&lt;/code&gt; as shortcut for type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;di.factory(&#39;path.to.the.factory_method&#39;)&lt;/code&gt; as shortcut for the type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;factory:path.to.the.factory_method&#39;&lt;/code&gt; as prefix of the configured type to lazy use the resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;attributeresolver:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;AttributeResolver&lt;/h4&gt;

&lt;p&gt;With the Resolver an attribute of an instance can be passed as an argument. This can be very useful if you are using the django web framework and want to pass a settings value as an argument fo an instance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{
    &#39;type&#39;: &#39;some.ClassName&#39;:
    &#39;args&#39;: {
        &#39;debug&#39;: AttributeResolver(&#39;django.conf.settings.DEBUG&#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Di also provides some shortcuts for this name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di.attr(&#39;django.conf.settings.DEBUG&#39;)&lt;/code&gt; as shortcut for type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;di.attribute(&#39;django.conf.settings.DEBUG&#39;)&lt;/code&gt; as shortcut for the type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;attr:django.conf.settings.DEBUG&#39;&lt;/code&gt; as prefix of the configured type to lazy use the resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;events:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Events&lt;/h3&gt;

&lt;p&gt;You can pass an EventDispatcher into the DiContainer. This Dispatcher will be called if anything interesting happens inside the Container. BaseType is &lt;code&gt;di.DIEventDispatcher&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;usage:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Usage&lt;/h4&gt;

&lt;p&gt;Simply create a dictionary with your type configuration and pass it as settings argument to the &lt;code&gt;DIContainer&lt;/code&gt;. The Dictionarys key is the type key to resolve the instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create the container
container = DIContainer(config)

# resolve the instance
instance = container.resolve(&#39;instance_key&#39;)

# resolve the instance type only
type_of_instance_key = container.resolve_type(&#39;instance_key&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resolve-lazy:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Resolve Lazy&lt;/h3&gt;

&lt;p&gt;Sometimes it may be necessary to create an instance at its first useage. So there are the following two messages, that returns a &lt;code&gt;di.Proxy&lt;/code&gt; instance at first.&lt;/p&gt;

&lt;p&gt;To use this Feature you need to provide a &lt;code&gt;proxy_type_name&lt;/code&gt; and install the specific package for this. I recommend &lt;code&gt;lazy-object-proxy&lt;/code&gt; with its type &lt;code&gt;Proxy&lt;/code&gt;. Which is the default value for this argument. It is not shipped with this package because of the many different other implementations and thier different licence. If you use this in combination with django you can use &lt;code&gt;django.utils.functional.SimpleLazyObject&lt;/code&gt;. &lt;strong&gt;But at this moment the &lt;code&gt;resolve_type_lazy&lt;/code&gt; is not working properly with &lt;code&gt;SimpleLazyObject&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create the container
container = DIContainer(config, proxy_type_name=&#39;lazy_object_proxy.Proxy&#39;)

# lazy resolves the instance
instance = container.resolve_lazy(&#39;instance_key&#39;)

# lazy resolves the instance type only
type_of_instance_key = container.resolve_type_lazy(&#39;instance_key&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;child-container:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Child Container&lt;/h3&gt;

&lt;p&gt;If you need the same container but override some settings you can create a child container and pass the deviant settings into it.&lt;/p&gt;

&lt;p&gt;This is the unittest that explains this function at its best.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;container = DIContainer({
    &#39;one&#39;: {
        &#39;type&#39;: &#39;mock.Mock&#39;,
        &#39;properties&#39;: {
            &#39;source&#39;: &#39;parent&#39;
        }
    },
    &#39;two&#39;: {
        &#39;type&#39;: &#39;mock.Mock&#39;,
        &#39;properties&#39;: {
            &#39;source&#39;: &#39;parent&#39;
        }
    }
})

self.assertEqual(container.one.source, &#39;parent&#39;)
self.assertEqual(container.two.source, &#39;parent&#39;)

child_container = container.create_child_container({
    &#39;two&#39;: {
        &#39;type&#39;: &#39;mock.Mock&#39;,
        &#39;properties&#39;: {
            &#39;source&#39;: &#39;child&#39;
        }
    }
})

self.assertEqual(child_container.one.source, &#39;parent&#39;)
self.assertEqual(child_container.two.source, &#39;child&#39;)
self.assertEqual(container.one.source, &#39;parent&#39;)
self.assertEqual(container.two.source, &#39;parent&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;decorators:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Decorators&lt;/h3&gt;

&lt;p&gt;Some method of the &lt;code&gt;di.DIContainer&lt;/code&gt; can be used as decorator zu register or inject instances within your code.&lt;/p&gt;

&lt;h4 id=&#34;register-by-decorator:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Register by decorator&lt;/h4&gt;

&lt;p&gt;The method register can be used as decorator for classes or factory methods. With this you do not need to provide the instances configuration at container creation.&lt;/p&gt;

&lt;p&gt;Passing the settings is optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@container.register(&amp;quot;my_service&amp;quot;, dict(args={&#39;init_arg&#39;: &#39;test&#39;}))
class MyService(object):

    def __init__(self, init_arg):
        self.init_arg = init_arg

    def get_data(self, args):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;inject-with-decorator:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Inject with decorator&lt;/h4&gt;

&lt;p&gt;The method &lt;code&gt;inject&lt;/code&gt; gives you the possibility to inject instances into a method if a keyword argument was not provided. that makes the loosely coupeling and testing very easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@container.inject(service=&#39;some_service&#39;)
def some_method(value, service):
    service.do_work(value)

some_method(&amp;quot;hello world&amp;quot;)
some_method(&amp;quot;hello world&amp;quot;, ExplicitService())
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;inject-many-with-decorator:b9d70d09ee04e5ce52bdb90bdc0c38cf&#34;&gt;Inject many with decorator&lt;/h4&gt;

&lt;p&gt;The method &lt;code&gt;inject_many&lt;/code&gt; gives you the possibility to inject multiple instances depending on their type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@container.inject_many(hooks=SomeHookClass)
def method(data, hook_instances):
    for hook in hook_instance:
        hook.hook(data)
    # ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python Logging Decorator</title>
      <link>/blog/python-logging-decorator/</link>
      <pubDate>Fri, 07 Mar 2014 18:22:56 +0100</pubDate>
      
      <guid>/blog/python-logging-decorator/</guid>
      <description>&lt;p&gt;Hin und wieder ist es notwendig, die Parameter und die Rückgabewerte
einer Funktion zu überprüfen. In Python kann man hierfür das logging
Paket und den später folgenden Decorator für die Funktionen verwenden.&lt;/p&gt;

&lt;p&gt;Zuvor müssen wir aber erstmal dafür sorgen, dass die Informationen
irgendwo ausgegeben werden. In diesem Fall auf der Konsole.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

# Einen Logger mit dem Namen foo.bar erstellen.
logger = logging.getLogger(&#39;foo.bar&#39;)
# Den Log-Level DEBUG setzten.
logger.setLevel(logging.DEBUG)
# Festlegen, dass die Meldungen auf der Konsole ausgegeben werden sollen.
logger.addHandler(logging.StreamHandler())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jetzt ertsellen wir den Decorator, z.B. in der Datei decorators.py.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

# Einen default Logger festlegen, der verwendet wird, wenn
# wenn beim Decorator kein Logger übergeben wurde.
_logger = logging.getLogger(__name__)


def log(level=logging.DEBUG, logger=None):
    logger = logger or _logger

    def inner(fnc):
        def wrapper(*args, **kwargs):
            logger.log(
                level,
                &#39;calling method. name=%s; args=%s; kwargs=%s;&#39;,
                fnc, args, kwargs
            )
            return_value = fnc(*args, **kwargs)
            logger.log(
                level,
                &#39;method called. name=%s; args=%s; kwargs=%s; return_value=%s&#39;,
                fnc, args, kwargs, return_value
            )
            return return_value
        return wrapper
    return inner
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jetzt verwenden wir den Decorator. Hierfür erstellen wir zwei Methoden,
denen wir die Parameter foo und bar übergeben. Zurückgegeben, wird ein
Tuple dieser beiden Werte. Über die Methoden setzten wir unseren
Decorator. Die Parameter des Decorators legen fest, in welchen Logger
und mit welchem Level die Meldungen ausgegeben werden sollen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import decorators

@decorators.log(logger=logger, level=logging.WARN)
def log_warning(foo, bar):
    return foo, bar


@decorators.log(logger=logger, level=logging.DEBUG)
def log_debug(foo, bar):
    return foo, bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jetzt rufen wir die Funktion auf:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; log_warning(&#39;foo&#39;, bar=&#39;bar&#39;)
[WARNING] calling method. name=&amp;lt;function log_warning at 0x2bf9320&amp;gt;; args=(&#39;foo&#39;,); kwargs={&#39;bar&#39;: &#39;bar&#39;};
[WARNING] method called. name=&amp;lt;function log_warning at 0x2bf9320&amp;gt;; args=(&#39;foo&#39;,); kwargs={&#39;bar&#39;: &#39;bar&#39;}; return_value=(&#39;foo&#39;, &#39;bar&#39;)

&amp;gt;&amp;gt;&amp;gt; log_debug(&#39;foo&#39;, bar=&#39;bar&#39;)
[DEBUG] calling method. name=&amp;lt;function log_warning at 0x2bf9320&amp;gt;; args=(&#39;foo&#39;,); kwargs={&#39;bar&#39;: &#39;bar&#39;};
[DEBUG] method called. name=&amp;lt;function log_warning at 0x2bf9320&amp;gt;; args=(&#39;foo&#39;,); kwargs={&#39;bar&#39;: &#39;bar&#39;}; return_value=(&#39;foo&#39;, &#39;bar&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Backbone.js - Nested Models</title>
      <link>/blog/backbonejs-nested-models/</link>
      <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/backbonejs-nested-models/</guid>
      <description>&lt;p&gt;Die Abbildung von Backbone Models auf Basis einer REST Schnittstelle ist
ja relativ einfach. Problematisch wurde es aber bei mir, als ich
versuchte ein Model zu laden, dessen Attribute ebenfalls wieder Models
bzw. eine Collection enthielten.&lt;/p&gt;

&lt;p&gt;LÃ¤sst man die Daten direkt von Backbone parsen, erhält man ein Attribut,
welches ein einfaches JavaScript Objekt oder ein Array aus diesen
enthält. Wie ich dieses Problem gelöst haben, möchte ich euch in einem
kleinen Beispiel erklären.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hier also zuerst die Ausgangslage:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Die REST Schnittstelle liefert unter der Adresss /api/data/ folgende
Daten. Abgebildet werden zwei Personen. &lt;em&gt;Max Mustermann&lt;/em&gt; hat zusätzlich
noch zwei Kinder, die im Attribut children enthalten sind. &lt;em&gt;Theresa
Test&lt;/em&gt; hat keine Kinder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  {
    &amp;quot;lastName&amp;quot;: &amp;quot;Mustermann&amp;quot;,
    &amp;quot;id&amp;quot;: 1,
    &amp;quot;firstName&amp;quot;: &amp;quot;Max&amp;quot;,
    &amp;quot;children&amp;quot;: [
      {
        &amp;quot;lastName&amp;quot;: &amp;quot;Mustermann&amp;quot;,
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;firstName&amp;quot;: &amp;quot;Malte&amp;quot;
      },
      {
        &amp;quot;lastName&amp;quot;: &amp;quot;Mustermann&amp;quot;,
        &amp;quot;id&amp;quot;: 3,
        &amp;quot;firstName&amp;quot;: &amp;quot;Lena&amp;quot;
      }
    ]
  },
  {
    &amp;quot;lastName&amp;quot;: &amp;quot;Test&amp;quot;,
    &amp;quot;children&amp;quot;: [],
    &amp;quot;id&amp;quot;: 4,
    &amp;quot;fistName&amp;quot;: &amp;quot;Theresa&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zu erst erstellen wir jetzt unser Backbone Model für die Person. An
dieser Stelle reicht uns erstmal die Minimalversion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Person = Backbone.Model.extend({});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anschließend benötigen wir die Collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var PersonCollection = Backbone.Collection.extend({
    url: &#39;/api/data/&#39;,
    model: Person
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Erstellen wir jetzt eine neue PersonCollection funktioniert das Laden
der Daten für&amp;rsquo;s erste. Nur enthält das Attribut children keine
PersonCollection, was aber unser Ziel ist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var pc = new PersonCollection();
pc.fetch();

pc.at(0).get(&#39;children&#39;); // Das erste Objekt laden und das Attribut children ansehen.
// &amp;gt;&amp;gt; [Object ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Um dafür zu sorgen, dass in dem Attribut chidlren eine PersonCollection
landet, müssen wir selbst dafür sorgen, dass die Informationen auch als
solche erkannt und verarbeitet werden.&lt;/p&gt;

&lt;p&gt;Aus diesem Grund muss die Methode parse der Person überschieben werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Person = window.Person = Backbone.Model.extend({
    parse: function (resp) {

        // Hat der Response ein Attribute children.
        if (resp[&#39;children&#39;]) {

            // jeden Eintrag in children durchgehen und eine
            // Person erstellen und das Objekt parsen lassen.
            var children = _.map(resp[&#39;children&#39;], function (child) {
                return new Person(child, {parse: true});
            });

    // aus der Liste der Personen eine PersonCollection erstellen
    // und dem Response zuweisen.
            resp[&#39;children&#39;] = new PersonCollection(children);
        }

    // den Ã¼berarbeiteten Resposen zurÃ¼ckgeben.
        return resp;
     }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mit dieser Erweiterung der Methode haben wir das gewünschte Ergebnis
erziehlt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var pc = new PersonCollection();
pc.fetch();

pc.at(0).get(&#39;children&#39;); // Das erste Objekt laden und das Attribut children ansehen.
// &amp;gt;&amp;gt;  {length: 2, models: Array[2], _byId: Object, constructor: function, url: &amp;quot;/api/data/&amp;quot;â¦}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>VIM als Python IDE</title>
      <link>/blog/vim-as-python-ide/</link>
      <pubDate>Thu, 17 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/vim-as-python-ide/</guid>
      <description>

&lt;p&gt;Es gibt einen Menge Anleitungen im Internet, wie man den Editor (G)Vim
in eine Entwicklungsumgebung werwandeln kann. Jetzt möchte ich mich in
die Liste der Authoren einreihen und meine Beschreibung und Erfahrungen
hier dokumentieren.&lt;/p&gt;

&lt;p&gt;Ich weiß, dass es viele dieser Anleitungen im Internet git. Ich selbst
habe eine Menge davon gelesen. Doch ich muss sagen, dass Ich wirklich
einige davon lesen musste, dass ich alles wusste, was ich für mein
(g)vim Setup brauchte. Deshalb möchte ich an dieser Stelle gerne noch
meine eigene Anleitung veröffentlichen. Für alle, die es interessiert
und als Erinnerung für mich ;-).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/gvim-as-ide.png?width=800&amp;amp;height=800&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vim-setup:c6b0ccb7e4be99ecf53dd520090c3d60&#34;&gt;Vim Setup&lt;/h2&gt;

&lt;p&gt;Ich gehe davon aus, dass (g)vim bereits auf dem System installiert ist.
Ist dies nicht der Fall, kann er unter &lt;a href=&#34;http://www.vim.org&#34;&gt;vim.org&lt;/a&gt;
heruntergeladen werden.&lt;/p&gt;

&lt;p&gt;Ist (g)vim erfolgreich installiert, sollte es die Konfigurationsdatei
.vimrc und den Ordner für die benutzerspezifische Konfiguration .vim im
Home-Verzeichnis geben.&lt;/p&gt;

&lt;h3 id=&#34;vimrc:c6b0ccb7e4be99ecf53dd520090c3d60&#34;&gt;.vimrc&lt;/h3&gt;

&lt;p&gt;In der .vimrc kann man einige Einstellungen festlegen, denen man sich
die Arbeit mit vim erleichtern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;    &amp;quot; Automatisches Neu-Laden des .vimrc nach dem Speichern
    autocmd! bufwritepost .vimrc source %

    &amp;quot; Mit F2 den Paste-Mode umschalten
    set pastemode=&amp;lt;F2&amp;gt;

    &amp;quot; aktivieren des syntaxhighlighting
    if has(&#39;syntax&#39;)
        syntax on
    endif

    &amp;quot; den leader key auf das , setzten
    let mapleader=&amp;quot;,&amp;quot;

    &amp;quot; shortcuts für das ein- und ausrücken von markierten
    &amp;quot; textblöcken auf die größer und kleiner tasten mappen
    vnoremap &amp;lt; &amp;lt;gv
    vnoremap &amp;gt; &amp;gt;gv

    &amp;quot; markieren von unnötigen Leerzeichen (in rot)
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
    au InsertLeave * match ExtraWhitespace /\s\+$/

    &amp;quot; festlegen des Farbschematas
    colors rdark

    filetype plugin indent on

    &amp;quot; Zeilennnummern anzeigen
    set number

    &amp;quot; die Breite des Dokuments auf 79 Zeichen setzten (z.B. für Python)
    set tw=79

    &amp;quot; kein automatischer Zeilenumbruch beim Anwendungsstart
    set nowrap

    &amp;quot; nicht automatisch umbrechen set fo-=t

    &amp;quot; Erweiterungen für das Einrücken
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set shiftround
    set expandtab

    &amp;quot; Anpassungen für die Suche
    set hlsearch
    set incsearch
    set ignorecase
    set smartcase

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plugins:c6b0ccb7e4be99ecf53dd520090c3d60&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;(g)vim ist ein sehr felxibler, modularer Editor, für den des eine Menge
Erweiterungen gibt. Zu finden sind diese u.a. unter
&lt;a href=&#34;http://www.vim.org&#34;&gt;vim.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zwei Plugins, die ich von Anfang an verwendet habe, Pathogen und
Powerline, möchte ich an dieser Stelle kurz vorstellen. Demnächst folgen
dann noch weitere Reviews.&lt;/p&gt;

&lt;h3 id=&#34;pathogen:c6b0ccb7e4be99ecf53dd520090c3d60&#34;&gt;Pathogen&lt;/h3&gt;

&lt;p&gt;Pathogen ist eine Plugin, mit dem es nicht mehr erforderlich ist die
einzelnen Plugins, die man so installierne möchte, auf die vielen
unterschiedlichen Ordner in .vim aufzuteilen. Dies ist besonders
wichtig, wenn man ein Plugin wieder deinstallieren möchte.&lt;/p&gt;

&lt;p&gt;Mit Pathogen erstellt man einen Ordner (autoload / bundle) in dem
ordnersepariert die einzelnen Plugins abgelegt werden. Anschließend
werden dann beim Start von vim die Plugins automatisch geladen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    $ mkdir -p ~/.vim/autoload ~/.vim/bundle
    $ curl -so ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun muss man das Plugin in der .vimrc aktivieren.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;    call pathogen#infect()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ab jetzt kann jedes Plugin einfach nach ~/.vim/bundle/PLUGIN_NAME/
entpackt werden.&lt;/p&gt;

&lt;h3 id=&#34;powerline:c6b0ccb7e4be99ecf53dd520090c3d60&#34;&gt;powerline&lt;/h3&gt;

&lt;p&gt;Die Powerline ist eine Erweiterung, die zusätzliche Informationen zur
geöffneten Datei, dem Ornder, dem DVCS Branch, usw. anzeigt.&lt;/p&gt;

&lt;p&gt;So sieht das Ergebnis dann aus:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/Lokaltog/powerline/develop/docs/source/_static/img/pl-mode-normal.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/Lokaltog/powerline/develop/docs/source/_static/img/pl-mode-insert.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/Lokaltog/powerline/develop/docs/source/_static/img/pl-mode-replace.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/Lokaltog/powerline/develop/docs/source/_static/img/pl-mode-visual.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Quelle: &lt;a href=&#34;https://github.com/Lokaltog/powerline&#34;&gt;https://github.com/Lokaltog/powerline&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Die alte vim-powerline ist obsolete. Die neue ist aktuell noch in der
Beta-Phase. Funktioniert aber in meinen ersten Tests gut.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    $ cd ~/.vim/bunde/
    $ git clone https://github.com/Lokaltog/powerline.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jetzt muss die Powerline noch in der .vimrc aktiviert werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;    autocmd VimEnter,Colorscheme * :source ~/.vim/bundle/powerline/powerline/ext/vim/source_plugin.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das wars schon. ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Namespaces</title>
      <link>/blog/python-namespaces/</link>
      <pubDate>Sat, 12 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/python-namespaces/</guid>
      <description>&lt;p&gt;In Programmiersprachen wie Java oder C# ist es möglich, Namespaces zu
nutzen um sein Programm zu struckturieren. In Python nutzt man hierfür
Packages. Auf den ersten Blick gibt es jedoch in Python keine
Möglichkeit die einzelnen Packete in mehrere Eggs aufzuteilen und damit
aussehen zu lassen als wären Sie eins. Dies dient meines Erachtens auch
der Übersichtlichtkeit des Programms/Frameworks.&lt;/p&gt;

&lt;p&gt;Da ich aus der C#/VB.NET Ecke komme, habe ich ich dieses Feature ein
wenig vermisst.&lt;/p&gt;

&lt;p&gt;Jetzt bin ich auf eine Möglichkeit gestoßen, dieses Feature auf in
Python zu nutzen. Hierfür muss man in jeder __init__.py jedes
Packetes folgenden Codeschnipsel einfügen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	try:
	    __import__(&#39;pkg_resources&#39;).declare_namespace(__name__)
	except ImportError:
	    from pkgutil import extend_path
	    __path__ = extend_path(__path__, __name__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Als Beispiel habe ich jetzt zwei Packete: &lt;em&gt;one&lt;/em&gt; und &lt;em&gt;two&lt;/em&gt;. Beide
enthalten die gleiche Strucktur, aber ein anderes Modul am Ende des
Pfades.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/one/foo/bar/foobar.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	def my_method():
	    print &amp;quot;Hello From FooBar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;/two/foo/bar/barfoo.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	def my_method():
    	print &amp;quot;Hello From BarFoo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sorgt man jetzt dafür, dass beide Pfade im PYTHONPATH liegen, kann man
diese so aufrufen, als wenn sie ein Packet wären.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	import sys
	
	sys.path.append(&#39;./one/&#39;)
	sys.path.append(&#39;./two/&#39;)
	
	from foo.bar import foobar, barfoo
	
	foobar.my_method()
	barfoo.my_method()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Den Quellcode zu diesem Beispiel habe ich auf Bitbucket veröffentlicht:
&lt;a href=&#34;http://bitbucket.org/jblawatt/python-namespace-example&#34;&gt;http://bitbucket.org/jblawatt/python-namespace-example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GWS Gesellschaft für Warenwirtschafts-Systeme mbH</title>
      <link>/about/042012-now-gws/</link>
      <pubDate>Sun, 01 Apr 2012 18:38:30 +0100</pubDate>
      
      <guid>/about/042012-now-gws/</guid>
      <description>&lt;p&gt;Currently i work for the &lt;a href=&#34;http://www.gws.ms&#34;&gt;GWSmbH&lt;/a&gt; im Münster, Germany.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;label&#34;&gt;Python&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;JavaScript&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;PostgreSQL&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Django&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Marionette&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Backbone&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;jQuery&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Software Architecture&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Equivalent zu ORACLE&#39;s initcap</title>
      <link>/blog/mysql-oracle-initcap-equivalent/</link>
      <pubDate>Fri, 11 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>/blog/mysql-oracle-initcap-equivalent/</guid>
      <description>&lt;p&gt;Die Funktion &lt;strong&gt;initcap&lt;/strong&gt; des &lt;em&gt;DBMS ORACLE&lt;/em&gt; verwandelt jedes erste
Zeichen eines Wortes in einem übergebenen String in ein Großbuchstaben,
der Rest wird klein geschrieben.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;    select initcap(&#39;jens blawatt&#39;) from dual;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ergebnis:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    Jens Blawatt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Diese Funktion gibt es leider in MySQL nicht. Es ist jedoch möglich
eigene Funktionen zu schreiben. Hier ist also meine MySQL initcap
Version (unter dem Quellcode gibt es die Downloadmöglichkeit):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;    DELIMITER $$
    
    DROP FUNCTION IF EXISTS initcap$$
    
    CREATE FUNCTION initcap( param VARCHAR(255) )
        RETURNS VARCHAR(255)
        /*
        * Author : Jens Blawatt
        * Website : http://www.Blawatt.de
        * Description : A MySQL equivalent to ORACLE&#39;s initcap
        */
        BEGIN
            DECLARE result VARCHAR(255) default &#39;&#39;;
            DECLARE tmp VARCHAR(255) default &#39;&#39;;
    
            -- endless repeat
            WHILE  1 = 1 DO
                -- if it&#39;s the end of the blank spearated string
                IF INSTR(TRIM(param) , &#39; &#39;) = 0 THEN
                    return trim(concat(result, UCASE(LEFT(param,1)),LOWER(SUBSTR(param,2))));
                END IF;
        
                -- split the first part to tmp
                SET tmp = SUBSTR(param, 1, INSTR(param , &#39; &#39;));
    
                -- write first character in capital letter rest in small type
                SET result = CONCAT(result, UCASE(LEFT(tmp,1)),LOWER(SUBSTR(tmp,2)));
    
                -- remove splitted word from param string
                SET param = SUBSTR(param, INSTR(param , &#39; &#39;) + 1);
            END WHILE;
        END$$
    
    DELIMITER ;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Stadt Münster - citeq</title>
      <link>/about/072008-032012-citeq/</link>
      <pubDate>Sun, 01 Jul 2007 18:38:30 +0100</pubDate>
      
      <guid>/about/072008-032012-citeq/</guid>
      <description>&lt;p&gt;After i finished my eductation i continued working for the citeq. While i continued to develop .NET Client/Server applications, extending the facility management tool &lt;a href=&#34;http://www.imsware.de&#34;&gt;IMSware&lt;/a&gt; was the main part of my job.&lt;/p&gt;

&lt;p&gt;I developed and maintained a module for facility maintainance and overhauling for the department of facility management at the manucipal on Münster.&lt;/p&gt;

&lt;p&gt;Another big project was the planing and development of the so called &amp;ldquo;Bürgerhaushalt&amp;rdquo;. An instrument of citizien participation regarding the budget of the city of Münster. The solution was based on &lt;a href=&#34;http://typo3.org&#34;&gt;typo3&lt;/a&gt;, written in &lt;a href=&#34;http://www.php.net&#34;&gt;PHP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;label&#34;&gt;.NET&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Oracle&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;PHP&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Typo3&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;MySQL&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;MediaWiki&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stadt Münster - citeq</title>
      <link>/about/082005-062008-citeq/</link>
      <pubDate>Mon, 01 Aug 2005 18:38:30 +0100</pubDate>
      
      <guid>/about/082005-062008-citeq/</guid>
      <description>&lt;p&gt;I did my edication at &lt;a href=&#34;http://www.citeq.de/&#34;&gt;Stadt Münster - citeq&lt;/a&gt; for &lt;em&gt;IT Specialist for Software Development&lt;/em&gt;. Creating .NET based Client/Server applications and Oracle Database Development was my key business there.&lt;/p&gt;

&lt;p&gt;Additionaly i cared about multiple &lt;a href=&#34;http://www.mediawiki.org/&#34;&gt;MediaWiki&lt;/a&gt; instances, which ic could establish as the central documentation platform there. Writing some special extensions was my job, too.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;label&#34;&gt;.NET&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;Oracle&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;PHP&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;MySQL&lt;/span&gt;
&lt;span class=&#34;label&#34;&gt;MediaWiki&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>